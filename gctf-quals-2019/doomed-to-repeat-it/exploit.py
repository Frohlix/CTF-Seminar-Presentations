#!/usr/bin/env python3

import websockets
import asyncio 
import json

from collections import defaultdict

URI = "wss://doomed.web.ctfcompetition.com/ws"
ORIGIN = "https://doomed.web.ctfcompetition.com"
BOARD_FILE = "board_layouts.txt"
BOARD_WIDTH = 7
BOARD_HEIGHT = 8
BOARD_SIZE = BOARD_WIDTH * BOARD_HEIGHT

def read_boards():
    boards = defaultdict(list)
    with open(BOARD_FILE) as f:
        for line in f:
            layout = line.strip().split(" ")
            board = [int(i) for i in layout]
            board_key = tuple(board[:4])
            boards[board_key].append(board)
    return boards

async def send_guess(ws, x, y):
    guess = {
                "op": "guess",
                "body": {
                    "x":x,
                    "y":y
                }
            }
    await ws.send(json.dumps(guess))
    response = await ws.recv()
    return json.loads(response)

async def get_board_key(ws):
    board_key = []
    for x in range(0,4):
        response = await send_guess(ws, x, 0)
        board = response["board"]
        board_key.append(board[x])
    return tuple(board_key)

def reorder_board(board):
    ordered_board = []
    for n in range(BOARD_SIZE // 2):
        ordered_board.extend([i for i, tile in enumerate(board) if tile == n])
    return ordered_board

async def main():
    print("Read board layouts")
    boards = read_boards()
    print("Connect to websocket")
    async with websockets.client.connect(URI, origin = ORIGIN) as ws:
        print("Uncover first four tiles")
        board_key = await get_board_key(ws)
        print(f"Board key: {board_key}")
        valid_boards = boards[board_key]
        print(f"Found {len(valid_boards)} valid boards")
        for i in reorder_board(valid_boards[0]):
            game = await send_guess(ws, i % BOARD_WIDTH, i // BOARD_WIDTH)
            if game["message"]:
                print(game["message"])

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
